import { Ctx, Update, Start, Action, On } from 'nestjs-telegraf';
import { Message } from 'telegraf/typings/core/types/typegram';

import { BotContext } from './bot-context.interface';
import { AppointmentDto } from './appointment/dto/appointment.dto';
import { TgInterfaceService } from './tg-interface/tg-interface.service';
import { UserInputsService } from './user-inputs/user-inputs.service';
import { StepService } from './step.service';

@Update()
export class AppService {
  constructor(
    private readonly tgInterfaceService: TgInterfaceService,
    private readonly userInputsService: UserInputsService,
    private readonly stepService: StepService,
  ) {}

  @Start()
  async startCommand(@Ctx() ctx: BotContext) {
    ctx.session = {};
    await ctx.reply(
      "üëã –í—ñ—Ç–∞—î–º–æ! –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
    );
    ctx.session.step = 'waiting_for_name';
  }

  @On('text')
  async onText(@Ctx() ctx: BotContext) {
    const message = ctx.message as Message;
    if (!this.userInputsService.isTextMessage(message)) {
      await ctx.reply('‚ùó–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
      return;
    }
    this.stepService.handleFinishConfirmBtn(message.text, ctx);

    this.stepService.dispatchOnAction(message.text, ctx);
  }

  @Action(/date_(.+)/)
  async onDateSelected(@Ctx() ctx: BotContext) {
    const callbackQuery = ctx.callbackQuery;
    if (callbackQuery && 'data' in callbackQuery) {
      const date = callbackQuery.data.split('_')[1];
      ctx.session.appointmentDate = date;
      ctx.session.step = 'waiting_for_time';
      await this.tgInterfaceService.sendTimeKeyboard(
        ctx,
        ctx.session.appointmentDate,
      );
    } else {
      await ctx.reply(
        '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞! –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
      );
    }
  }

  @Action(/time_(.+)/)
  async onTimeSelected(@Ctx() ctx: BotContext) {
    const callbackQuery = ctx.callbackQuery;
    if (callbackQuery && 'data' in callbackQuery) {
      const time = callbackQuery.data.split('_')[1];
      const appointmentDto: AppointmentDto = {
        name: ctx.session.name,
        phone: ctx.session.phone,
        email: ctx.session.email,
        appointmentDate: new Date(`${ctx.session.appointmentDate}T${time}:00`),
        createdAt: new Date(),
      };

      await this.showFilledForm(ctx, appointmentDto);
    } else {
      await ctx.reply('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞! –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  private async showFilledForm(
    ctx: BotContext,
    appointmentDto: AppointmentDto,
  ) {
    const message = `
      üìù **–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Å—É:**
      - –Ü–º'—è: ${appointmentDto.name}
      - –¢–µ–ª–µ—Ñ–æ–Ω: ${appointmentDto.phone}
      - Email: ${appointmentDto.email}
      - üìÖ –î–∞—Ç–∞ –∑—É—Å—Ç—Ä—ñ—á—ñ: ${appointmentDto.appointmentDate.toLocaleString(
        'uk-UA',
        this.stepService.normalizeReplyDate,
      )}`;

    await ctx.reply(message, { parse_mode: 'Markdown' });

    this.tgInterfaceService.handleMainKeyboards(ctx, '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏');
  }
}
